name: "Deploy to Server"

on:
  push:
      branches:
        - main

jobs:
  sonartest:
    name: Analyze with Sonar
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  
  deploy:
    runs-on: ubuntu-latest
    env:
      SERVER_IP: ${{ vars.SERVER_IP }}

    steps:
      - uses: actions/checkout@v3

      - name: "Build Docker Image"
        run: |
          docker login -u yshakya -p $DOCKERHUB_PAT
          docker build -t yshakya/vcs .
          docker push yshakya/vcs
        env:
          DOCKERHUB_PAT: ${{ secrets.DOCKERHUB_PAT }}

      - name: "Configure SSH"
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
          touch ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
      
      - name: "Put SSH Key in Docker file for Server Access"
        run: |
          touch mykey.pem
          echo $SSH_KEY64 | base64 -d > mykey.pem && chmod 400 mykey.pem
          ssh-keygen -R $SERVER_IP
        env: 
          SSH_KEY64: ${{ secrets.SSH_KEY64 }}

      - name: "Docker Pull and Restart Docker"
        run: |
          ssh -t ubuntu@$SERVER_IP -i mykey.pem 'docker pull yshakya/vcs'
          ssh -t ubuntu@$SERVER_IP -i mykey.pem 'docker stop mysite && docker rm mysite'
          ssh -t ubuntu@$SERVER_IP -i mykey.pem 'docker run --name mysite -p 80:80 -d yshakya/vcs'